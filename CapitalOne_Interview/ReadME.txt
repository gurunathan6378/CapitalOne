Coding Exercise Instructions:
 
Our API is documented at https://doc.level-labs.com - username: interview@levelmoney.com password: password2. We'd like you to write a program that:
·         Loads a user's transactions from the GetAllTransactions endpoint
·         Determines how much money the user spends and makes in each of the months for which we have data, and in the "average" month. What "average" means is up to you.
·         Output these numbers in the following format (and optionally in a more pretty format, if you see fit)
{"2014-10": {"spent": "$200.00", "income": "$500.00"},
"2014-11": {"spent": "$1510.05", "income": "$1000.00"},
...
"2015-04": {"spent": "$300.00", "income": "$500.00"},
"average": {"spent": "$750.00", "income": "$950.00"}}
You have considerable latitude on how to display this data, obtain it, and what language to use. Please do this in the way that feels most comfortable for you. For many of our applicants, they prefer to use a script you run from the command line. For some, it is a webpage that displays things. For others, it’s a live code notebook. What’s important is that it is reproducible by us.
We’d also like you to try and add at least one “additional feature” to this program (and if you’re able, all of them). They’re listed below as command line switches for a terminal program, but we’d accept any method that lets a user decide how to display this data.
·         --ignore-donuts: The user is so enthusiastic about donuts that they don't want donut spending to come out of their budget. Disregard all donut-related transactions from the spending. You can just use the merchant field to determine what's a donut - donut transactions will be named “Krispy Kreme Donuts” or “DUNKIN #336784”.
·         --crystal-ball: We expose a GetProjectedTransactionsForMonth endpoint, which returns all the transactions that have happened or are expected to happen for a given month. It looks like right now it only works for this month, but that's OK. Merge the results of this API call with the full list from GetAllTransactions and use it to generate predicted spending and income numbers for the rest of this month, in addition to previous months. 
·         --ignore-cc-payments: Paying off a credit card shows up as a credit transaction and a debit transaction, but it's not really "spending" or "income". Make your aggregate numbers disregard credit card payments. For the users we give you, credit card payments will consist of two transactions with opposite amounts (e.g. 5000000 centocents and -5000000 centocents) within 24 hours of each other. For verification, you should also output a list of the credit card payments you detected - this can be in whatever format you like.
 

 
 Note from me: 
 ==============
 1.) For some reason I could not able to call the API https://doc.level-labs.com and getting the below error
 "Unable to read data from the transport connection: An existing connection was forcibly closed by the remote host", so 
 I decide to get the data manually from https://2016.api.levelmoney.com/ by navigating to GetAllTransactions URI and store them 
 locally in json file and developed my code on top on the JSON data. TransactionData.json is the file name which contains data 

 2.) This technical coding is developed in Windows Forms 
 3.) After opening CapitalOne_Interview.sln solution file you will be seeing two project
		CapitalOne_Interview.csproj			: This project contains actual code base 
		CapitalOne_Interview.Test.csproj	: This is the test project for the CapitalOne_Interview.csproj	code base. 
											  This unit test code is autogenerated by Visual Studio Intellitest framework 
											  and not all unit test code will pass.												


 Steps to run the application:
 =============================
 1.) Install Visual Studio Community 2015 from https://www.microsoft.com/en-us/download/details.aspx?id=48146
 2.) Clone GitHub repository from https://github.com/gurunathan6378/CapitalOne to local machine  
									or 
     Open Visual Studio -->Navigate to View menu-->Select Team Explorer-->Under Local Git Repositories-->Select Clone
	 -->Enter this Git repository Url "https://github.com/gurunathan6378/CapitalOne" -->select local file location to clone and click on clone button
 3.) Goto File menu-->Select Open-->browse to the source code location -->select  CapitalOne_Interview.sln
 4.) Press Ctrl+Shift+B keys to compile the solution
 5.) Press F5 button to run the application
 6.) Once the application is executing click on Process button to see the result in the below rich text box